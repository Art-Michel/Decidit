//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scripts/PlayerInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputMap"",
    ""maps"": [
        {
            ""name"": ""FirstPersonCamera"",
            ""id"": ""863135e6-bea6-4ed2-b692-413856ebbc9f"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""01a0b487-aa39-4b9f-8f45-43ad21bf9009"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateX"",
                    ""type"": ""Value"",
                    ""id"": ""e491d7e4-43be-4119-8b69-a84644feefd5"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateY"",
                    ""type"": ""Value"",
                    ""id"": ""29451bb7-91e8-4d2d-9acd-10ed968a1da8"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5ba8563d-91ec-472c-9b0d-b178761191d9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e8c5941d-1200-4941-bc3b-817e5b007793"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Unfocus"",
                    ""type"": ""Button"",
                    ""id"": ""708f576c-3aa6-48e7-880f-1674575f9ffc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac486cd9-a9d1-4608-a39c-40a7e99bd4c6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40ce88d8-245c-4004-9ae5-5d0b0d3d0347"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""RotateX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46794db6-9378-4cbc-83fe-f0befe03ec39"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""RotateY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""838ba2a6-c262-4c0d-83e0-c3af829dbc19"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""738eeb83-2fe4-4198-a648-526dfc199c58"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d6940a74-9583-44bc-82dc-475bf43c9cc8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4d3b0578-a6d9-450c-87e7-f7758b99c9a5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d5cb2f8a-f0ca-4d0a-9f67-3ac6797c47a3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4771ccf1-2263-458c-8b80-f8bc8ba26035"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""77fc58e2-2d83-4eb6-82bb-34fddb55ecb1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66918b5e-f08d-4bfa-a899-792cc5d57090"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b84646fc-17be-4ce1-9c00-4534fcdc3a46"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse"",
                    ""action"": ""Unfocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard Mouse"",
            ""bindingGroup"": ""Keyboard Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShock4GamepadAndroid>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<SwitchProControllerHID>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FirstPersonCamera
        m_FirstPersonCamera = asset.FindActionMap("FirstPersonCamera", throwIfNotFound: true);
        m_FirstPersonCamera_Rotate = m_FirstPersonCamera.FindAction("Rotate", throwIfNotFound: true);
        m_FirstPersonCamera_RotateX = m_FirstPersonCamera.FindAction("RotateX", throwIfNotFound: true);
        m_FirstPersonCamera_RotateY = m_FirstPersonCamera.FindAction("RotateY", throwIfNotFound: true);
        m_FirstPersonCamera_Move = m_FirstPersonCamera.FindAction("Move", throwIfNotFound: true);
        m_FirstPersonCamera_Jump = m_FirstPersonCamera.FindAction("Jump", throwIfNotFound: true);
        m_FirstPersonCamera_Unfocus = m_FirstPersonCamera.FindAction("Unfocus", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstPersonCamera
    private readonly InputActionMap m_FirstPersonCamera;
    private IFirstPersonCameraActions m_FirstPersonCameraActionsCallbackInterface;
    private readonly InputAction m_FirstPersonCamera_Rotate;
    private readonly InputAction m_FirstPersonCamera_RotateX;
    private readonly InputAction m_FirstPersonCamera_RotateY;
    private readonly InputAction m_FirstPersonCamera_Move;
    private readonly InputAction m_FirstPersonCamera_Jump;
    private readonly InputAction m_FirstPersonCamera_Unfocus;
    public struct FirstPersonCameraActions
    {
        private @PlayerInputMap m_Wrapper;
        public FirstPersonCameraActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_FirstPersonCamera_Rotate;
        public InputAction @RotateX => m_Wrapper.m_FirstPersonCamera_RotateX;
        public InputAction @RotateY => m_Wrapper.m_FirstPersonCamera_RotateY;
        public InputAction @Move => m_Wrapper.m_FirstPersonCamera_Move;
        public InputAction @Jump => m_Wrapper.m_FirstPersonCamera_Jump;
        public InputAction @Unfocus => m_Wrapper.m_FirstPersonCamera_Unfocus;
        public InputActionMap Get() { return m_Wrapper.m_FirstPersonCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonCameraActions set) { return set.Get(); }
        public void SetCallbacks(IFirstPersonCameraActions instance)
        {
            if (m_Wrapper.m_FirstPersonCameraActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotate;
                @RotateX.started -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotateX;
                @RotateX.performed -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotateX;
                @RotateX.canceled -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotateX;
                @RotateY.started -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotateY;
                @RotateY.performed -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotateY;
                @RotateY.canceled -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnRotateY;
                @Move.started -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnJump;
                @Unfocus.started -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnUnfocus;
                @Unfocus.performed -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnUnfocus;
                @Unfocus.canceled -= m_Wrapper.m_FirstPersonCameraActionsCallbackInterface.OnUnfocus;
            }
            m_Wrapper.m_FirstPersonCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @RotateX.started += instance.OnRotateX;
                @RotateX.performed += instance.OnRotateX;
                @RotateX.canceled += instance.OnRotateX;
                @RotateY.started += instance.OnRotateY;
                @RotateY.performed += instance.OnRotateY;
                @RotateY.canceled += instance.OnRotateY;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Unfocus.started += instance.OnUnfocus;
                @Unfocus.performed += instance.OnUnfocus;
                @Unfocus.canceled += instance.OnUnfocus;
            }
        }
    }
    public FirstPersonCameraActions @FirstPersonCamera => new FirstPersonCameraActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IFirstPersonCameraActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnRotateX(InputAction.CallbackContext context);
        void OnRotateY(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUnfocus(InputAction.CallbackContext context);
    }
}
